#include "ClockApp.h"
#include "../../core/Luciol/GraphicContext.h"
#include "../../core/Luciol/PropertiesAnimator.h"
#include "../../core/Luciol/Clock.h"


#define DIGIT_TRANSITION_FRAMES 6

uint8_t digitsTransitions[10][DIGIT_TRANSITION_FRAMES][7] = {
    {   // 0 -> 1
        { 0x3F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x3F }, // 0
        { 0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1F },
        { 0x0F, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0F },
        { 0x07, 0x05, 0x05, 0x05, 0x05, 0x05, 0x07 },
        { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 },
        { 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }  // 1
    },
    {
        // 1 -> 2
        { 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, // 1
        { 0x03, 0x01, 0x01, 0x03, 0x02, 0x02, 0x03 },
        { 0x07, 0x01, 0x01, 0x07, 0x04, 0x04, 0x07 },
        { 0x0F, 0x01, 0x01, 0x0F, 0x08, 0x08, 0x0F },
        { 0x1F, 0x01, 0x01, 0x1F, 0x10, 0x10, 0x1F },
        { 0x3F, 0x01, 0x01, 0x3F, 0x20, 0x20, 0x3F }  // 2
    },
    {
        // 2 -> 3
        { 0x3F, 0x01, 0x01, 0x3F, 0x20, 0x20, 0x3F }, // 2
        { 0x3F, 0x01, 0x01, 0x1F, 0x10, 0x10, 0x3F },
        { 0x3F, 0x01, 0x01, 0x0F, 0x08, 0x08, 0x3F },
        { 0x3F, 0x01, 0x01, 0x0F, 0x04, 0x04, 0x3F },
        { 0x3F, 0x01, 0x01, 0x0F, 0x02, 0x02, 0x3F },
        { 0x3F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x3F }  // 3
    },
    {
        // 3 -> 4
        { 0x3F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x3F }, // 3
        { 0x3F, 0x21, 0x01, 0x0F, 0x01, 0x01, 0x1F },
        { 0x2F, 0x21, 0x21, 0x1F, 0x01, 0x01, 0x0F },
        { 0x27, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x07 },
        { 0x23, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x03 },
        { 0x21, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x01 }  // 4
    },
    {
        // 4 -> 5
        { 0x21, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x01 }, // 4
        { 0x30, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x03 },
        { 0x38, 0x20, 0x21, 0x3F, 0x01, 0x01, 0x07 },
        { 0x3C, 0x20, 0x20, 0x3F, 0x01, 0x01, 0x0F },
        { 0x3E, 0x20, 0x20, 0x3F, 0x01, 0x01, 0x1F },
        { 0x3F, 0x20, 0x20, 0x3F, 0x01, 0x01, 0x3F }  // 5
    },
    {
        // 5 -> 6
        { 0x3F, 0x20, 0x20, 0x3F, 0x01, 0x01, 0x3F }, // 5
        { 0x3F, 0x20, 0x20, 0x3F, 0x21, 0x01, 0x3F },
        { 0x3F, 0x20, 0x20, 0x3F, 0x21, 0x21, 0x3F },
        { 0x3F, 0x20, 0x20, 0x3F, 0x21, 0x21, 0x3F },
        { 0x3F, 0x20, 0x20, 0x3F, 0x21, 0x21, 0x3F },
        { 0x3F, 0x20, 0x20, 0x3F, 0x21, 0x21, 0x3F }  // 6
    },
    {
        // 6 -> 7
        { 0x3F, 0x20, 0x20, 0x3F, 0x21, 0x21, 0x3F }, // 6
        { 0x1F, 0x10, 0x10, 0x1F, 0x11, 0x11, 0x1F },
        { 0x0F, 0x08, 0x08, 0x0F, 0x09, 0x09, 0x0F },
        { 0x0F, 0x04, 0x04, 0x07, 0x05, 0x05, 0x07 },
        { 0x0F, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03 },
        { 0x0F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }  // 7
    },
    {
        // 7 -> 8
        { 0x0F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 }, // 7
        { 0x0F, 0x01, 0x01, 0x03, 0x01, 0x01, 0x03 },
        { 0x0F, 0x01, 0x01, 0x07, 0x01, 0x01, 0x07 },
        { 0x0F, 0x01, 0x01, 0x0F, 0x01, 0x01, 0x0F },
        { 0x1F, 0x01, 0x11, 0x1F, 0x11, 0x01, 0x1F },
        { 0x3F, 0x21, 0x21, 0x3F, 0x21, 0x21, 0x3F }  // 8
    },
    {
        // 8 -> 9
        { 0x3F, 0x21, 0x21, 0x3F, 0x21, 0x21, 0x3F }, // 8
        { 0x3F, 0x21, 0x21, 0x3F, 0x21, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x3F }  // 9
    },
    {
        // 9 -> 0
        { 0x3F, 0x21, 0x21, 0x3F, 0x01, 0x01, 0x3F }, // 9
        { 0x3F, 0x21, 0x21, 0x3D, 0x01, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x39, 0x01, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x31, 0x21, 0x01, 0x3F },
        { 0x3F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x3F },
        { 0x3F, 0x21, 0x21, 0x21, 0x21, 0x21, 0x3F }  // 0
    }
};


void ClockApp::run(GraphicContext* gc, Ambience* ambience, unsigned long time) {
    gc->verticalGradient(RgbColor(0, 0, 0), RgbColor(80, 60, 0));

    int hours = Clock::getHours();
    int minutes = Clock::getMinutes();

    nh1 = hours / 10;
    if (nh1 != h1) {
        if (h1fi < (DIGIT_TRANSITION_FRAMES-1)) {
            h1fi++;
        } else {
            h1 = nh1;
            h1fi = 0;
        }
    }

    nh2 = hours % 10;
    if (nh2 != h2) {
        if (h2fi < (DIGIT_TRANSITION_FRAMES-1)) {
            h2fi++;
        } else {
            h2 = nh2;
            h2fi = 0;
        }
    }

    nm1 = minutes / 10;
    if (nm1 != m1) {
        if (m1fi < (DIGIT_TRANSITION_FRAMES-1)) {
            m1fi++;
        } else {
            m1 = nm1;
            m1fi = 0;
        }
    }
    
    nm2 = minutes % 10;
    if (nm2 != m2) {
        if (m2fi < (DIGIT_TRANSITION_FRAMES-1)) {
            m2fi++;
        } else {
            m2 = nm2;
            m2fi = 0;
        }
    }

    uint8_t* mask;
    uint8_t w;
    
    // H1
    mask = digitsTransitions[h1][h1fi];
    gc->drawBitMask(2, 1, mask, 6, 7);

    // H2
    mask = digitsTransitions[h2][h2fi];
    w = gc->getBitMaskMaxWidth(mask, 7);
    gc->drawBitMask(9 - (6-w), 1, mask, 6, 7);

    // M1
    mask = digitsTransitions[m1][m1fi];
    gc->drawBitMask(2, 9, mask, 6, 7);

    // M2
    mask = digitsTransitions[m2][m2fi];
    w = gc->getBitMaskMaxWidth(mask, 7);
    gc->drawBitMask(9 - (6-w), 9, mask, 6, 7);
}


void ClockApp::wakeUp(GraphicContext* gc, Ambience* ambience) {
    Clock::sync();
    gc->setDrawColor(RgbColor(50, 255, 100));

    int hours = Clock::getHours();   // FIXME
    int minutes = Clock::getMinutes(); // FIXME
    h1 = hours / 10;
    h2 = hours % 10;
    m1 = minutes / 10;
    m2 = minutes % 10;
}
